FILENAME=out/root-to-me.txt

sanity:
	podman run -it docker.io/busybox

clean:
	@rm out/* || true

build:
	podman build . -t mine

root-to-me: clean
	@echo ""
	@echo "======== ROOT TO ME ========"
	@echo "When using the default podman mapping, the user outside the container that executes podman, \`$$(whoami)\`, maps to \`root\` inside."
	@podman run -it \
		-v ${PWD}:/bound:Z \
		docker.io/busybox \
		/bin/sh -c "echo \"I am \$$(whoami) inside the container\"" > ${FILENAME}
	@owner=$$(stat -c '%U' ${FILENAME}); \
	echo "I am $$owner outside of the container." >> ${FILENAME}
	@cat ${FILENAME}

root-to-me-explicit: clean
	@echo ""
	@echo "======== ROOT TO ME **EXPLICIT** ========"
	@echo "We can explicitly do the same thing with uidmap."
	@podman run -it \
		--uidmap=0:$$(id -u):1 \
		-v ${PWD}:/bound:Z \
		docker.io/busybox \
		/bin/sh -c "echo \"I am \$$(whoami) inside the container\"" > ${FILENAME}
		@owner=$$(stat -c '%U' ${FILENAME}); \
		echo "I am $$owner outside of the container." >> ${FILENAME}
		@cat ${FILENAME}

me-to-me: clean
	@echo ""
	@echo "======== ME TO ME ========"
	@echo "When using keep-id mapping, the user outside the container that executes podman, \`$$(whoami)\`, maps to \`$$(whoami)\` inside."
	@podman run -it \
		--userns=keep-id \
		-v ${PWD}:/bound:Z \
		docker.io/busybox \
		/bin/sh -c "echo \"I am \$$(whoami) inside the container\"" > ${FILENAME}
		@owner=$$(stat -c '%U' ${FILENAME}); \
		echo "I am $$owner outside of the container." >> ${FILENAME}
		@cat ${FILENAME}

fancy: clean build
	@echo ""
	@echo "======== ROOT TO OTHER, ME TO ME ========"
	@echo "We also have to map the root user, which is still the user that executes the container ENTRYPOINT and CMD"
	@echo "If we are running as root on the host, --uidmap syntax is container_uid:host_uid"
	@echo "   ... but in this case we are running rootless so so it is container_uid:intermediate_uid"
	@echo "The intermediate_uid is a namespace generated by podman."
	@echo "The \`@\` character tells podman to lookup the intermediate_uid for that user, and use that instead, which allows us to map to a host UID."
	@echo "Note: though we are mapping to root to 1005 outside of the container, that will be an intermediate uid that will not have permissions for the bound directories."
	@echo ""
	@echo "Starting container:"
	@podman run --rm -d \
		--name m2m-e \
		--uidmap=0:1005:1 \
		--uidmap=1000:@$$(id -u):1 \
		-v ${PWD}:/bound:Z \
		mine \
		/bin/sh -c "tail -f /dev/null"
	@echo ""
	@echo "Now we will execute a command as \`$$(whoami)\` in both the container and host."
	podman exec -it --user 1000 m2m-e /bin/sh -c "echo \"I am \$$(whoami) inside the container\"" > ${FILENAME}
	@owner=$$(stat -c '%U' ${FILENAME}); \
	echo "I am $$owner outside of the container." >> ${FILENAME}
	@cat ${FILENAME}
	podman stop m2m-e

demo: fancy me-to-me root-to-me-explicit root-to-me
